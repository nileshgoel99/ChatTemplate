var React = require('react-native')
var{
  Text,
  View,
  ListView,
  TextInput,
  Dimensions,
  Animated,
  Image,
  TouchableHighlight,
  Platform,
  Wrapper,
  Picker,
  PixelRatio

} = React;

const styles = require('./styles');
import Message from './Message';
var nativeModules = require('react-native').NativeModules;
var ImagePickerManager = nativeModules.ImagePickerManager;
var GiftedMessenger = require('react-native-gifted-messenger');
var moment = require('moment');

var Button = require('react-native-button');
const Firebase = require('firebase');
//const FirebaseUrl = 'https://luminous-heat-9071.firebaseio.com/';
const FirebaseUrl = 'https://ujama.firebaseio.com';


module.exports = React.createClass({

  firstDisplay: true,
  listHeight: 0,
  footerY: 0,

  getDefaultProps() {
    return {
      displayNames: true,
      displayNamesInsideBubble: false,
      placeholder: '',
      styles: {},
      autoFocus: true,
      onErrorButtonPress: (message, rowID) => {},
      loadEarlierMessagesButton: false,
      loadEarlierMessagesButtonText: 'Load earlier messages',
      onLoadEarlierMessages: (oldestMessage, callback) => {},
      parseText: false,
      handleUrlPress: (url) => {},
      handlePhonePress: (phone) => {},
      handleEmailPress: (email) => {},
      initialMessages: [],
      messages: [],
      handleSend: (message, rowID) => {},
      maxHeight: Dimensions.get('window').height,
      senderName: 'Sender',
      senderImage: null,
      sendButtonText: 'Send',
      onImagePress: null,
      onMessageLongPress: null,
      hideTextInput: true,
      keyboardDismissMode: 'interactive',
      keyboardShouldPersistTaps: true,
      submitOnReturn: false,
      forceRenderImage: false,
      onChangeText: (text) => {},
      autoScroll: false,
    };
  },

  propTypes: {
    displayNames: React.PropTypes.bool,
    displayNamesInsideBubble: React.PropTypes.bool,
    placeholder: React.PropTypes.string,
    styles: React.PropTypes.object,
    autoFocus: React.PropTypes.bool,
    onErrorButtonPress: React.PropTypes.func,
    loadMessagesLater: React.PropTypes.bool,
    loadEarlierMessagesButton: React.PropTypes.bool,
    loadEarlierMessagesButtonText: React.PropTypes.string,
    onLoadEarlierMessages: React.PropTypes.func,
    parseText: React.PropTypes.bool,
    handleUrlPress: React.PropTypes.func,
    handlePhonePress: React.PropTypes.func,
    handleEmailPress: React.PropTypes.func,
    initialMessages: React.PropTypes.array,
    messages: React.PropTypes.array,
    handleSend: React.PropTypes.func,
    onCustomSend: React.PropTypes.func,
    renderCustomText: React.PropTypes.func,
    maxHeight: React.PropTypes.number,
    senderName: React.PropTypes.string,
    senderImage: React.PropTypes.object,
    sendButtonText: React.PropTypes.string,
    onImagePress: React.PropTypes.func,
    onMessageLongPress: React.PropTypes.func,
    hideTextInput: React.PropTypes.bool,
    keyboardDismissMode: React.PropTypes.string,
    keyboardShouldPersistTaps: React.PropTypes.bool,
    forceRenderImage: React.PropTypes.bool,
    onChangeText: React.PropTypes.func,
    autoScroll: React.PropTypes.bool,
  },

  getInitialState: function() {
    this._data = [];
    this._rowIds = [];

    this.userProfileRef = new Firebase(FirebaseUrl);

    this.userProfileRef.on('value', (snap) => {
      console.log("THis is sanp", snap.val());
      // get children as an array

    })

    var textInputHeight = 44;
    if (this.props.hideTextInput === false) {
      if (this.props.styles.hasOwnProperty('textInputContainer')) {
        textInputHeight = this.props.styles.textInputContainer.height || textInputHeight;
      }
    }


    this.listViewMaxHeight = this.props.maxHeight - textInputHeight;

    var ds = new ListView.DataSource({rowHasChanged: (r1, r2) => {
      if (typeof r1.status !== 'undefined') {
        return true;
      }
      return r1 !== r2;
    }});
          var FirstChat = {"chatText" : "Whats your kid name?","ActionType" : [{"Field" : "Text","FieldAction" : "this.addKidProfile.bind('null','name')","style":""}]}
    setTimeout(() => {this.appendMessage({text: FirstChat["chatText"], name: 'Ujama', image: {uri: 'https://bytebucket.org/ujama/ujama-reactnative-objectivec-app/raw/8bbf632a468cc0303c5df4e3507f24a422a22223/docs/Ujama-linkedin-logo.png?token=f585d46f345d7ba07ebb4be0ef7af3822ec18bf9'}, position: 'left', date: new Date(2015, 10, 16, 19, 0)})}, 200);
    return {
      hideTextInputState: false,
      userState: 0,
      dataSource: ds.cloneWithRows([]),
      text: '',
      disabled: true,
      CurrentState : 1,
      StateTemplate: FirstChat,
      kidName : "",
      height: new Animated.Value(this.listViewMaxHeight),
      isLoadingEarlierMessages: false,
      allLoaded: false,
      appearAnim: new Animated.Value(0),
    };
  },

  onChangeText(text) {
    this.setState({
      text: text
    })
    if (text.trim().length > 0) {
      this.setState({
        disabled: false
      })
    } else {
      this.setState({
        disabled: true
      })
    }

    this.props.onChangeText(text);
  },

  getMessage(rowID) {
    if (typeof this._rowIds[this._rowIds.indexOf(rowID)] !== 'undefined') {
      if (typeof this._data[this._rowIds[this._rowIds.indexOf(rowID)]] !== 'undefined') {
        return this._data[this._rowIds[this._rowIds.indexOf(rowID)]];
      }
    }
    return null;
  },

  componentDidMount() {
    //this.scrollResponder = this.refs.listView.getScrollResponder();

    if (this.props.messages.length > 0) {
      this.appendMessages(this.props.messages);
    } else if (this.props.initialMessages.length > 0) {
      this.appendMessages(this.props.initialMessages);
    } else {
      // Set allLoaded, unless props.loadMessagesLater is set
      if (!this.props.loadMessagesLater) {
        this.setState({
          allLoaded: true
        });
      }
    }

  },

  componentWillReceiveProps(nextProps) {
    this._data = [];
    this._rowIds = [];
    this.appendMessages(nextProps.messages);

    var textInputHeight = 44;
    if (nextProps.styles.hasOwnProperty('textInputContainer')) {
      textInputHeight = nextProps.styles.textInputContainer.height || textInputHeight;
    }

    if (nextProps.maxHeight !== this.props.maxHeight) {
      this.listViewMaxHeight = nextProps.maxHeight;
    }

    if (nextProps.hideTextInput && !this.props.hideTextInput) {
      this.listViewMaxHeight += textInputHeight;

      this.setState({
        height: new Animated.Value(this.listViewMaxHeight),
      });
    } else if (!nextProps.hideTextInput && this.props.hideTextInput) {
      this.listViewMaxHeight -= textInputHeight;

      this.setState({
        height: new Animated.Value(this.listViewMaxHeight),
      });
    }
  },

  scrollToBottom() {
    if (this.listHeight && this.footerY && this.footerY > this.listHeight) {
      var scrollDistance = this.listHeight - this.footerY;
      this.scrollResponder.scrollTo({
        y: -scrollDistance,
      });
    }
  },

  onSend() {
    var message = {
      text: this.state.text.trim(),
      name: this.props.senderName,
      image: this.props.senderImage,
      position: 'right',
      date: new Date(),
    };
    if (this.props.onCustomSend) {
      this.props.onCustomSend(message);
    } else {
      var rowID = this.appendMessage(message, true);
      this.props.handleSend(message, rowID);
      this.onChangeText('');
    }
  },

  renderAnimatedView() {
    return (
      <Animated.View
        style={{
          height: this.state.height,
        }}

      >
        <ListView
          ref='listView'
          dataSource={this.state.dataSource}
          renderRow={this.renderRow}
          renderHeader={this.renderLoadEarlierMessages}
          onLayout={(event) => {
            var layout = event.nativeEvent.layout;
            this.listHeight = layout.height;
            if (this.firstDisplay === true) {
              requestAnimationFrame(() => {
                this.firstDisplay = false;
                this.scrollWithoutAnimationToBottom();
              });
            }

          }}
          renderFooter={() => {
            return <View onLayout={(event)=>{
              var layout = event.nativeEvent.layout;
              this.footerY = layout.y;

              if (this.props.autoScroll) {
                this.scrollToBottom();
              }
            }}></View>
          }}

          style={styles.listView}

          // not working android RN 0.14.2
          onKeyboardWillShow={this.onKeyboardWillShow}
          onKeyboardDidShow={this.onKeyboardDidShow}
          onKeyboardWillHide={this.onKeyboardWillHide}
          onKeyboardDidHide={this.onKeyboardDidHide}


          keyboardShouldPersistTaps={this.props.keyboardShouldPersistTaps} // @issue keyboardShouldPersistTaps={false} + textInput focused = 2 taps are needed to trigger the ParsedText links
          keyboardDismissMode={this.props.keyboardDismissMode}


          initialListSize={10}
          pageSize={this.props.messages.length}


          {...this.props}
        />

      </Animated.View>
    );
  },

  onKeyboardWillHide(e) {
    Animated.timing(this.state.height, {
      toValue: this.listViewMaxHeight,
      duration: 150,
    }).start();
  },

  onKeyboardWillShow(e) {
    Animated.timing(this.state.height, {
      toValue: this.listViewMaxHeight - (e.endCoordinates ? e.endCoordinates.height : e.end.height),
      duration: 200,
    }).start();
  },

  onKeyboardDidShow(e) {
    if(React.Platform.OS == 'android') {
      this.onKeyboardWillShow(e);
    }
    this.scrollToBottom();
  },
  onKeyboardDidHide(e) {
    if(React.Platform.OS == 'android') {
      this.onKeyboardWillHide(e);
    }
  },

  scrollToBottom() {
    if (this.listHeight && this.footerY && this.footerY > this.listHeight) {
      var scrollDistance = this.listHeight - this.footerY;
      this.scrollResponder.scrollTo({
        y: -scrollDistance,
      });
    }
  },

  scrollWithoutAnimationToBottom() {
    if (this.listHeight && this.footerY && this.footerY > this.listHeight) {
      var scrollDistance = this.listHeight - this.footerY;
      this.scrollResponder.scrollTo({
        y: -scrollDistance,
        x: 0,
        animated: false,
      });
    }
  },


  appendMessages(messages = []) {
    var rowID = null;
    for (let i = 0; i < messages.length; i++) {
      messages[i].isOld = true;
      this._data.push(messages[i]);
      this._rowIds.push(this._data.length - 1);
      rowID = this._data.length - 1;
    }

    this.setState({
      dataSource: this.state.dataSource.cloneWithRows(this._data, this._rowIds),
    });

    return rowID;
  },

  appendMessage(message = {}, scrollToBottom = true) {
    var rowID = this.appendMessages([message]);

    if (scrollToBottom === true) {
      setTimeout(() => {
        // inspired by http://stackoverflow.com/a/34838513/1385109
        this.scrollToBottom();
      }, (Platform.OS === 'android' ? 200 : 100));
    }

    return rowID;
  },

  refreshRows() {
    this.setState({
      dataSource: this.state.dataSource.cloneWithRows(this._data, this._rowIds),
    });
  },

  setMessageStatus(status = '', rowID) {
    if (status === 'ErrorButton') {
      if (this._data[rowID].position === 'right') {
        this._data[rowID].status = 'ErrorButton';
        this.refreshRows();
      }
    } else {
      if (this._data[rowID].position === 'right') {
        this._data[rowID].status = status;

        // only 1 message can have a status
        for (let i = 0; i < this._data.length; i++) {
          if (i !== rowID && this._data[i].status !== 'ErrorButton') {
            this._data[i].status = '';
          }
        }
        this.refreshRows();
      }
    }
  },

  renderDate(rowData = {}, rowID = null) {
    var diffMessage = null;
    if (rowData.date instanceof Date) {
      if (diffMessage === null) {
        return (
          <Text style={[this.styles.date]}>
            {moment(rowData.date).calendar()}
          </Text>
        );
      } else if (diffMessage.date instanceof Date) {
        let diff = moment(rowData.date).diff(moment(diffMessage.date), 'minutes');
        if (diff > 5) {
          return (
            <Text style={[this.styles.date]}>
              {moment(rowData.date).calendar()}
            </Text>
          );
        }
      }
    }
    return null;
  },
  renderRow(rowData = {}, sectionID = null, rowID = null) {

    var diffMessage = null;

    return (
      <View>
        <Message
          rowData={rowData}
          rowID={rowID}
          onErrorButtonPress={this.props.onErrorButtonPress}
          displayNames={this.props.displayNames}
          displayNamesInsideBubble={this.props.displayNamesInsideBubble}
          diffMessage={diffMessage}
          position={rowData.position}
          forceRenderImage={this.props.forceRenderImage}
          onImagePress={this.props.onImagePress}
          onMessageLongPress={this.props.onMessageLongPress}
          renderCustomText={this.props.renderCustomText}

          styles={styles}
        />
      </View>
    )
  },

  getMessages() {
        return [
          {
              text: 'Welcome to Ujama!',
              name: '',  // don't send a name
              image: {uri: 'https://facebook.github.io/react/img/logo_og.png'},
              position: 'left',
              date: new Date(2015, 0, 16, 19, 0)
          },
          {
              text: "Ujama is a credit based carpooling system.",
              name: '',
              image: null,
              position: 'left',
              date: new Date(2015, 0, 16, 19, 0)
          },
          {
              text: "You earn credits when you give rides.",
              name: '',
              image: null,
              position: 'left',
              date: new Date(2015, 0, 16, 19, 0)
          },
          {
              text: "You can shop using excess credits.",
              name: '',
              image: null,
              position: 'left',
              date: new Date(2015, 0, 16, 19, 0)
          }
        ];
  },
  render : function(){
    return(
      <View
        style={styles.container}
        ref='container'
      >
      <GiftedMessenger
                  ref= {(c) => this._GiftedMessenger = c}

                  messages={this.getMessages()}
                  handleSend={this.handleSend}
                  maxHeight={Dimensions.get('window').height - 64} // 64 for the navBar
                  hideTextInput={true}
                  parseText={true}
                />

          {this.renderTextInput()}
      </View>

    );
  },

  renderTextInput() {
    var items = this.state.StateTemplate["ActionType"]
    switch(items[0]["Field"]){
      case "Text":
      return (
        <View style={styles.textInputContainer}>

          <TextInput
            style={styles.textInput}
            placeholder={this.props.placeholder}
            ref='textInput'
            onChangeText={this.onChangeText}
            value={this.state.text}
            autoFocus={this.props.autoFocus}
            returnKeyType={this.props.submitOnReturn ? 'send' : 'default'}
            onSubmitEditing={this.props.submitOnReturn ? this.onSend : null}
            enablesReturnKeyAutomatically={true}

            blurOnSubmit={false}
          />
          <Button
            style={styles.sendButton}
            styleDisabled={styles.sendButtonDisabled}
            onPress={eval(this.state.StateTemplate["ActionType"][0]["FieldAction"])}
            disabled= {false}
          >
            {this.props.sendButtonText}
          </Button>
        </View>
      );
      break;

      case "Button":
          var wrapthis = this;

          var items = this.state.StateTemplate["ActionType"]
          const renderedButtons =  items.map(b => {
            return <Button style={styles.button} key={b.FieldText} onPress={eval(b.FieldAction)}> {b.FieldText} </Button>;
          });

          return(
            <View style={styles.ButtonValContainer} key={'UNIQUE_KEY_HERE'}>
              {renderedButtons}
            </View>
          );
      break;

      case "Options":
          console.log("In OPtions")
          var itemsVal = this.state.StateTemplate["ActionType"]
          const renderedOptions =  itemsVal.map(val => {
            console.log("This is Item", val);
            return <Picker.Item label={val.FieldText} value={val.FieldAction} key={val.FieldText}/>;
          });
          console.log("This is rendered Options", renderedOptions);
          return(
            <View style={styles.optionsContainer}>
            <Picker
            style={styles.picker}
        selectedValue={this.state.language}
        onValueChange={(lang) => this.setState({language: lang})}>
        <Picker.Item label="Test" value="Test" key="Test"/>
        </Picker>
        <Button
        style={styles.sendButton}
        styleDisabled={styles.sendButtonDisabled}
        onPress={this.addKidProfile}
        disabled= {false}
        >
        {this.props.sendButtonText}
        </Button>
            </View>
          );
      break;


      default : console.log("In Ujama Project");
    }
  },

  addKidProfile(profileType) {
    var message = {
      text: this.state.text.trim(),
      name: this.props.senderName,
      image: this.props.senderImage,
      position: 'right',
      date: new Date(),
    };
    if (this.props.onCustomSend) {
      this.props.onCustomSend(message);
    } else {

      console.log("This is message", message);
      var rowID = this.appendMessage(message, true);
      /*
      console.log("This is profile type", profileType);
      if(profileType == "name"){
        this.setState({
          CurrentState : 2,
          kidName : message["text"],
          StateTemplate : {  "chatText" : "Please upload %s photo","ActionType" : [{"Field" : "Button",  "FieldText" : "Upload","FieldAction" : "wrapthis.getImageUploader(wrapthis)","style":""  }]}

        })

        this.state.StateTemplate["chatText"] = this.parse(this.state.StateTemplate["chatText"] , this.state.kidName );
        setTimeout(() => {this.appendMessage({text: this.state.StateTemplate["chatText"], name: 'Ujama', image: {uri: 'https://bytebucket.org/ujama/ujama-reactnative-objectivec-app/raw/8bbf632a468cc0303c5df4e3507f24a422a22223/docs/Ujama-linkedin-logo.png?token=f585d46f345d7ba07ebb4be0ef7af3822ec18bf9'}, position: 'left', date: new Date(2015, 10, 16, 19, 0)})}, 500);

      }
      else if(profileType == "number"){
        this.setState({
            CurrentState : 5,
            StateTemplate : {
            "chatText" : "Upload a photo key for %s to validate the driver at pick up",
            "ActionType" : [{"Field" : "Button",  "FieldText" : "Upload","FieldAction" : "wrapthis.getIdentityImage(wrapthis)","style":""  }]
            },
        });
        this.state.StateTemplate["chatText"] = this.parse(this.state.StateTemplate["chatText"] , this.state.kidName );
        setTimeout(() => {this.appendMessage({text: this.state.StateTemplate["chatText"], name: 'Ujama', image: {uri: 'https://bytebucket.org/ujama/ujama-reactnative-objectivec-app/raw/8bbf632a468cc0303c5df4e3507f24a422a22223/docs/Ujama-linkedin-logo.png?token=f585d46f345d7ba07ebb4be0ef7af3822ec18bf9'}, position: 'left', date: new Date()})}, 1000);

      }
      else if(profileType == "grade"){
        /*this.setState({
            CurrentState : 7,
            StateTemplate : {
            "chatText" : "Which Elementary School does she go to?",
            "ActionType" : [{
                "Field" : "Button",
                "FieldText" : "ElementaryCreekSchool",
                "FieldAction" : "ElementaryCreekSchool",
                "style":""
              },{
                  "Field" : "Button",
                  "FieldText" : "WestHigh",
                  "FieldAction" : "WestHigh",
                  "style":""
                }]
            },
        });
        //this.state.StateTemplate["chatText"] = this.parse(this.state.StateTemplate["chatText"] , this.state.kidName );
        //setTimeout(() => {this.appendMessage({text: this.state.StateTemplate["chatText"], name: 'Ujama', image: {uri: 'https://bytebucket.org/ujama/ujama-reactnative-objectivec-app/raw/8bbf632a468cc0303c5df4e3507f24a422a22223/docs/Ujama-linkedin-logo.png?token=f585d46f345d7ba07ebb4be0ef7af3822ec18bf9'}, position: 'left', date: new Date()})}, 1000);

      }*/
    }
  },


  parse(str) {
    var args = [].slice.call(arguments, 1),
        i = 0;

    return str.replace(/%s/g, function() {
        return args[i++];
    });
  },

  getImageUploader(){
    setTimeout(() => {this.appendMessage({text: 'Done', position: 'right', date: new Date()})}, 500);
    this.setState({
          CurrentState : 3,
         StateTemplate : {
         "chatText" : "Does %s have a cell phone",
         "ActionType" : [{
             "Field" : "Button",
             "FieldText" : "No",
             "FieldAction" : "wrapthis.kidCellNumber('no')",
             "style":""
           },{
               "Field" : "Button",
               "FieldText" : "Yes",
               "FieldAction" : "wrapthis.kidCellNumber('yes')",
               "style":""
             }]
         },
     });



     this.state.StateTemplate["chatText"] = this.parse(this.state.StateTemplate["chatText"] , this.state.kidName );
     setTimeout(() => {this.appendMessage({text: this.state.StateTemplate["chatText"], name: 'Ujama', image: {uri: 'https://bytebucket.org/ujama/ujama-reactnative-objectivec-app/raw/8bbf632a468cc0303c5df4e3507f24a422a22223/docs/Ujama-linkedin-logo.png?token=f585d46f345d7ba07ebb4be0ef7af3822ec18bf9'}, position: 'left', date: new Date(2015, 10, 16, 19, 0)})}, 1000);


  },

  kidCellNumber(responseVal){
    /*
      if(responseVal == "no"){
        setTimeout(() => {this.appendMessage({text: 'Thanks', name: 'Ujama', image: {uri: 'https://bytebucket.org/ujama/ujama-reactnative-objectivec-app/raw/8bbf632a468cc0303c5df4e3507f24a422a22223/docs/Ujama-linkedin-logo.png?token=f585d46f345d7ba07ebb4be0ef7af3822ec18bf9'}, position: 'left', date: new Date()})}, 1000);

      }else{
        this.setState({
            CurrentState : 4,
            StateTemplate : {
            "chatText" : "Please Enter the %s Number",
            "ActionType" : [{"Field" : "Text","FieldAction" : "this.addKidProfile('number')","style":""}]
            },
        });
        this.state.StateTemplate["chatText"] = this.parse(this.state.StateTemplate["chatText"] , this.state.kidName );
        setTimeout(() => {this.appendMessage({text: this.state.StateTemplate["chatText"], name: 'Ujama', image: {uri: 'https://bytebucket.org/ujama/ujama-reactnative-objectivec-app/raw/8bbf632a468cc0303c5df4e3507f24a422a22223/docs/Ujama-linkedin-logo.png?token=f585d46f345d7ba07ebb4be0ef7af3822ec18bf9'}, position: 'left', date: new Date()})}, 1000);

      }*/
  },
  getNotification : function(){

    console.log("In Notification");
    this.props.navigator.push({name:'notification'})
  }

});
